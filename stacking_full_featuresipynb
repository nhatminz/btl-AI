{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11237152,"sourceType":"datasetVersion","datasetId":7020161},{"sourceId":11651856,"sourceType":"datasetVersion","datasetId":7310237}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load dữ liệu (giả sử bạn đã có sẵn df)\ndf = pd.read_csv(\"/kaggle/input/data-full-features-ai/weather_data_nghean (1).csv\")\n\n# Kiểm tra thông tin tổng quát\nprint(df.info())\nprint(df.describe())\n\ndf.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:23:01.888790Z","iopub.execute_input":"2025-05-05T08:23:01.889204Z","iopub.status.idle":"2025-05-05T08:23:04.267862Z","shell.execute_reply.started":"2025-05-05T08:23:01.889175Z","shell.execute_reply":"2025-05-05T08:23:04.267133Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 388493 entries, 0 to 388492\nData columns (total 38 columns):\n #   Column    Non-Null Count   Dtype  \n---  ------    --------------   -----  \n 0   x         388493 non-null  float64\n 1   y         388493 non-null  float64\n 2   B04B      388493 non-null  float64\n 3   B05B      388493 non-null  float64\n 4   B06B      388493 non-null  float64\n 5   B09B      388493 non-null  float64\n 6   B10B      388493 non-null  float64\n 7   B11B      388493 non-null  float64\n 8   B12B      388493 non-null  float64\n 9   B14B      388493 non-null  float64\n 10  B16B      388493 non-null  float64\n 11  I2B       388493 non-null  float64\n 12  I4B       388493 non-null  float64\n 13  IRB       388493 non-null  float64\n 14  VSB       388493 non-null  float64\n 15  WVB       388493 non-null  float64\n 16  CAPE      388493 non-null  float64\n 17  CIN       388493 non-null  float64\n 18  EWSS      388493 non-null  float64\n 19  IE        388493 non-null  float64\n 20  ISOR      388493 non-null  float64\n 21  KX        388493 non-null  float64\n 22  PEV       388493 non-null  float64\n 23  R250      388493 non-null  float64\n 24  R500      388493 non-null  float64\n 25  R850      388493 non-null  float64\n 26  SLHF      388493 non-null  float64\n 27  SLOR      388493 non-null  float64\n 28  SSHF      388493 non-null  float64\n 29  TCLW      388493 non-null  float64\n 30  TCW       388493 non-null  float64\n 31  TCWV      388493 non-null  float64\n 32  U250      388493 non-null  float64\n 33  U850      388493 non-null  float64\n 34  V250      388493 non-null  float64\n 35  V850      388493 non-null  float64\n 36  Radar     388493 non-null  float64\n 37  datetime  388493 non-null  object \ndtypes: float64(37), object(1)\nmemory usage: 112.6+ MB\nNone\n                   x              y           B04B           B05B  \\\ncount  388493.000000  388493.000000  388493.000000  388493.000000   \nmean      104.949809      19.234241       0.294234       0.174581   \nstd         0.437629       0.310876       0.199693       0.123118   \nmin       103.900000      18.560000       0.000391       0.000326   \n25%       104.620000      19.000000       0.141541       0.080861   \n50%       104.980000      19.240000       0.251780       0.155233   \n75%       105.300000      19.440000       0.437042       0.253082   \nmax       105.780000      19.960000       0.923014       0.612529   \n\n                B06B           B09B           B10B           B11B  \\\ncount  388493.000000  388493.000000  388493.000000  388493.000000   \nmean        0.129021     243.419956     250.408793     271.419048   \nstd         0.095252      10.202720      12.674594      21.098207   \nmin         0.000326     198.584960     169.366670     169.545000   \n25%         0.041728     238.151980     244.618580     259.743530   \n50%         0.118703     245.584880     254.291060     278.781040   \n75%         0.209381     250.669970     259.575560     287.011350   \nmax         0.433777     262.196000     268.004850     303.228880   \n\n                B12B           B14B  ...           SLOR          SSHF  \\\ncount  388493.000000  388493.000000  ...  388493.000000  3.884930e+05   \nmean      255.579941     272.033474  ...       0.028054 -9.036349e+04   \nstd        13.180805      22.568102  ...       0.014501  1.854509e+05   \nmin       176.324800     169.685610  ...       0.000701 -1.469406e+06   \n25%       248.202160     258.477700  ...       0.016802 -1.607370e+05   \n50%       260.255700     280.006770  ...       0.028084 -2.627300e+04   \n75%       265.263920     289.189640  ...       0.040154  2.112800e+04   \nmax       275.978500     306.162450  ...       0.058033  3.990850e+05   \n\n                TCLW            TCW           TCWV           U250  \\\ncount  388493.000000  388493.000000  388493.000000  388493.000000   \nmean        0.219809      43.269879      42.926766      11.939170   \nstd         0.232675       8.946554       8.712348      15.162809   \nmin         0.000000      14.542634      14.542566     -22.836090   \n25%         0.059570      36.939102      36.731980      -3.439392   \n50%         0.128784      42.879913      42.662720      15.895691   \n75%         0.311035      49.382996      48.897170      24.974121   \nmax         1.454712      75.416110      71.073074      42.879456   \n\n                U850           V250           V850          Radar  \ncount  388493.000000  388493.000000  388493.000000  388493.000000  \nmean       -1.525150       4.590938      -0.703348       0.204880  \nstd         5.760290       7.601398       5.227427       1.360052  \nmin       -24.732285     -13.504059     -22.774704       0.000000  \n25%        -4.977386      -0.895676      -3.536209       0.000000  \n50%        -1.275269       3.602570       0.969681       0.000000  \n75%         2.725372       9.770599       3.042831       0.000000  \nmax        12.849945      27.846588       9.968582      82.570000  \n\n[8 rows x 37 columns]\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"        x      y      B04B      B05B      B06B       B09B       B10B  \\\n0  104.90  19.96  0.498362  0.352224  0.236776  255.42627  260.79110   \n1  104.94  19.96  0.498362  0.352224  0.236776  255.42627  260.79110   \n2  104.98  19.96  0.572723  0.384196  0.249166  255.30000  260.90370   \n3  104.86  19.92  0.532949  0.360718  0.238078  255.81377  260.79684   \n4  104.90  19.92  0.532949  0.360718  0.238078  255.81377  260.79684   \n\n        B11B      B12B       B14B  ...      SSHF      TCLW        TCW  \\\n0  279.25586  259.7476  281.53525  ... -137404.0  0.601746  35.615920   \n1  279.25586  259.7476  281.53525  ... -137404.0  0.601746  35.615920   \n2  280.62646  260.5460  283.24900  ... -137404.0  0.601746  35.615920   \n3  278.82367  259.3540  280.84116  ... -272124.0  0.550171  32.744827   \n4  278.82367  259.3540  280.84116  ... -137404.0  0.601746  35.615920   \n\n        TCWV       U250      U850      V250      V850  Radar  \\\n0  35.005510  25.895142 -4.906418  6.482254  5.172928    0.0   \n1  35.005510  25.895142 -4.906418  6.482254  5.172928    0.0   \n2  35.005510  25.895142 -4.906418  6.482254  5.172928    0.0   \n3  32.179337  26.195923 -4.334152  6.599442  3.686600    0.0   \n4  35.005510  25.895142 -4.906418  6.482254  5.172928    0.0   \n\n              datetime  \n0  2019-04-01 08:00:00  \n1  2019-04-01 08:00:00  \n2  2019-04-01 08:00:00  \n3  2019-04-01 08:00:00  \n4  2019-04-01 08:00:00  \n\n[5 rows x 38 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n      <th>B04B</th>\n      <th>B05B</th>\n      <th>B06B</th>\n      <th>B09B</th>\n      <th>B10B</th>\n      <th>B11B</th>\n      <th>B12B</th>\n      <th>B14B</th>\n      <th>...</th>\n      <th>SSHF</th>\n      <th>TCLW</th>\n      <th>TCW</th>\n      <th>TCWV</th>\n      <th>U250</th>\n      <th>U850</th>\n      <th>V250</th>\n      <th>V850</th>\n      <th>Radar</th>\n      <th>datetime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>104.90</td>\n      <td>19.96</td>\n      <td>0.498362</td>\n      <td>0.352224</td>\n      <td>0.236776</td>\n      <td>255.42627</td>\n      <td>260.79110</td>\n      <td>279.25586</td>\n      <td>259.7476</td>\n      <td>281.53525</td>\n      <td>...</td>\n      <td>-137404.0</td>\n      <td>0.601746</td>\n      <td>35.615920</td>\n      <td>35.005510</td>\n      <td>25.895142</td>\n      <td>-4.906418</td>\n      <td>6.482254</td>\n      <td>5.172928</td>\n      <td>0.0</td>\n      <td>2019-04-01 08:00:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>104.94</td>\n      <td>19.96</td>\n      <td>0.498362</td>\n      <td>0.352224</td>\n      <td>0.236776</td>\n      <td>255.42627</td>\n      <td>260.79110</td>\n      <td>279.25586</td>\n      <td>259.7476</td>\n      <td>281.53525</td>\n      <td>...</td>\n      <td>-137404.0</td>\n      <td>0.601746</td>\n      <td>35.615920</td>\n      <td>35.005510</td>\n      <td>25.895142</td>\n      <td>-4.906418</td>\n      <td>6.482254</td>\n      <td>5.172928</td>\n      <td>0.0</td>\n      <td>2019-04-01 08:00:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>104.98</td>\n      <td>19.96</td>\n      <td>0.572723</td>\n      <td>0.384196</td>\n      <td>0.249166</td>\n      <td>255.30000</td>\n      <td>260.90370</td>\n      <td>280.62646</td>\n      <td>260.5460</td>\n      <td>283.24900</td>\n      <td>...</td>\n      <td>-137404.0</td>\n      <td>0.601746</td>\n      <td>35.615920</td>\n      <td>35.005510</td>\n      <td>25.895142</td>\n      <td>-4.906418</td>\n      <td>6.482254</td>\n      <td>5.172928</td>\n      <td>0.0</td>\n      <td>2019-04-01 08:00:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104.86</td>\n      <td>19.92</td>\n      <td>0.532949</td>\n      <td>0.360718</td>\n      <td>0.238078</td>\n      <td>255.81377</td>\n      <td>260.79684</td>\n      <td>278.82367</td>\n      <td>259.3540</td>\n      <td>280.84116</td>\n      <td>...</td>\n      <td>-272124.0</td>\n      <td>0.550171</td>\n      <td>32.744827</td>\n      <td>32.179337</td>\n      <td>26.195923</td>\n      <td>-4.334152</td>\n      <td>6.599442</td>\n      <td>3.686600</td>\n      <td>0.0</td>\n      <td>2019-04-01 08:00:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>104.90</td>\n      <td>19.92</td>\n      <td>0.532949</td>\n      <td>0.360718</td>\n      <td>0.238078</td>\n      <td>255.81377</td>\n      <td>260.79684</td>\n      <td>278.82367</td>\n      <td>259.3540</td>\n      <td>280.84116</td>\n      <td>...</td>\n      <td>-137404.0</td>\n      <td>0.601746</td>\n      <td>35.615920</td>\n      <td>35.005510</td>\n      <td>25.895142</td>\n      <td>-4.906418</td>\n      <td>6.482254</td>\n      <td>5.172928</td>\n      <td>0.0</td>\n      <td>2019-04-01 08:00:00</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 38 columns</p>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"HIMA_BANDS = ['B04B', 'B05B', 'B06B', 'B09B', 'B10B', 'B11B', 'B12B', 'B14B', 'B16B', 'I2B', 'I4B', 'IRB', 'VSB', 'WVB']\nERA5_PARAMS = ['CAPE', 'CIN', 'EWSS', 'IE', 'ISOR', 'KX', 'PEV', 'R250', 'R500', 'R850', 'SLHF', 'SLOR', 'SSHF', 'TCLW', 'TCW', 'TCWV', 'U250', 'U850', 'V250', 'V850']\nHEIGHT, WIDTH = 90, 250","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:23:04.269532Z","iopub.execute_input":"2025-05-05T08:23:04.269755Z","iopub.status.idle":"2025-05-05T08:23:04.273868Z","shell.execute_reply.started":"2025-05-05T08:23:04.269738Z","shell.execute_reply":"2025-05-05T08:23:04.273211Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom scipy.stats import pearsonr\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom cuml.ensemble import RandomForestRegressor\n\n#========== Các hàm tiện ích chung ==========\ndef filter_features(X, selected_features, feature_names=None):\n    if isinstance(X, pd.DataFrame):\n        missing = set(selected_features) - set(X.columns)\n        if missing:\n            raise ValueError(f\"Missing features: {missing}\")\n        return X[selected_features]\n    elif isinstance(X, np.ndarray):\n        if feature_names is None:\n            raise ValueError(\"Feature names chưa được định nghĩa cho numpy array\")\n        X_df = pd.DataFrame(X, columns=feature_names)\n        return X_df[selected_features].values\n    else:\n        raise TypeError(\"Đầu vào phải là DataFrame hoặc numpy array\")\n\n#========== Hàm cho XGBoost ==========\ndef train_xgb(X, y, selected_features, params=None, sample_weight=None, n_splits=5):\n    default_params = {\n        \"objective\": \"reg:squarederror\",\n        \"tree_method\": \"hist\",\n        \"device\": \"cuda\",\n        \"n_estimators\": 100,\n        \"learning_rate\": 0.1,\n        \"max_depth\": 6,\n        \"subsample\": 1.0,\n        \"colsample_bytree\": 1.0,\n        \"random_state\": 42,\n        \"min_child_weight\": 3,\n        \"gamma\": 0\n    }\n    final_params = {**default_params, **(params or {})}\n    \n    feature_names = X.columns.tolist() if isinstance(X, pd.DataFrame) else None\n    X_filtered = filter_features(X, selected_features, feature_names)\n    \n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    train_idx, val_idx = next(kf.split(X_filtered))\n    \n    # Trích xuất trọng số cho tập train\n    if sample_weight is not None:\n        train_weight = sample_weight[train_idx]\n        val_weight = sample_weight[val_idx]\n    else:\n        train_weight = val_weight = None\n\n    X_train = X_filtered.iloc[train_idx] if isinstance(X, pd.DataFrame) else X_filtered[train_idx]\n    y_train = y.iloc[train_idx] if isinstance(y, pd.Series) else y[train_idx]\n    X_val = X_filtered.iloc[val_idx] if isinstance(X, pd.DataFrame) else X_filtered[val_idx]\n    y_val = y.iloc[val_idx] if isinstance(y, pd.Series) else y[val_idx]\n\n    model = xgb.XGBRegressor(**final_params)\n    model.fit(\n        X_train, y_train,\n        eval_set=[(X_val, y_val)],\n        sample_weight=train_weight,  # Thêm trọng số\n        early_stopping_rounds=10,\n        verbose=False\n    )\n    \n    return {\n        'model': model,\n        'feature_names': feature_names,\n        'selected_features': selected_features\n    }\n\n\ndef predict_xgb(model_dict, X):\n    X_filtered = filter_features(\n        X, \n        model_dict['selected_features'], \n        model_dict['feature_names']\n    )\n    return model_dict['model'].predict(X_filtered)\n\n#========== Hàm cho LightGBM ==========\ndef train_lgb(X, y, selected_features, params=None, n_splits=5):\n    default_params = {\n        'objective': 'regression',\n        'metric': 'mse',\n        'boosting_type': 'gbdt',\n        'n_estimators': 100,\n        'learning_rate': 0.1,\n        'max_depth': 6,\n        'num_leaves': 31,\n        'subsample': 0.8,\n        'colsample_bytree': 0.8,\n        'random_state': 42,\n        'device': 'gpu'\n    }\n    final_params = {**default_params, **(params or {})}\n    \n    feature_names = X.columns.tolist() if isinstance(X, pd.DataFrame) else None\n    X_filtered = filter_features(X, selected_features, feature_names)\n    \n    kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n    train_idx, val_idx = next(kf.split(X_filtered))\n    \n    X_train = X_filtered.iloc[train_idx] if isinstance(X, pd.DataFrame) else X_filtered[train_idx]\n    y_train = y.iloc[train_idx] if isinstance(y, pd.Series) else y[train_idx]\n    X_val = X_filtered.iloc[val_idx] if isinstance(X, pd.DataFrame) else X_filtered[val_idx]\n    y_val = y.iloc[val_idx] if isinstance(y, pd.Series) else y[val_idx]\n\n    train_data = lgb.Dataset(X_train, label=y_train)\n    val_data = lgb.Dataset(X_val, label=y_val, reference=train_data)\n    \n    model = lgb.train(\n        final_params,\n        train_data,\n        valid_sets=[val_data],\n        num_boost_round=100,\n        callbacks=[lgb.early_stopping(stopping_rounds=10, verbose=False)]\n    )\n    \n    return {\n        'model': model,\n        'feature_names': feature_names,\n        'selected_features': selected_features\n    }\n\ndef predict_lgb(model_dict, X):\n    X_filtered = filter_features(\n        X,\n        model_dict['selected_features'],\n        model_dict['feature_names']\n    )\n    return model_dict['model'].predict(X_filtered)\n\n#========== Hàm cho Random Forest ==========\ndef train_ert(X, y, selected_features, params=None):\n    default_params = {'n_estimators': 100, 'max_features': 1.0, 'n_streams': 1}\n    final_params = {**default_params, **(params or {})}\n    \n    feature_names = X.columns.tolist() if isinstance(X, pd.DataFrame) else None\n    X_filtered = filter_features(X, selected_features, feature_names)\n    \n    model = RandomForestRegressor(**final_params)\n    model.fit(X_filtered, y)\n    \n    return {\n        'model': model,\n        'feature_names': feature_names,\n        'selected_features': selected_features\n    }\n\ndef predict_ert(model_dict, X):\n    X_filtered = filter_features(\n        X,\n        model_dict['selected_features'],\n        model_dict['feature_names']\n    )\n    return model_dict['model'].predict(X_filtered)\n\n#========== Hàm cho Stacking ==========\ndef generate_meta_features(X, y, base_models, n_folds=5):\n    kf = KFold(n_splits=n_folds, shuffle=True, random_state=42)\n    meta = np.zeros((X.shape[0], len(base_models)))\n    \n    for i, model_dict in enumerate(base_models):\n        for train_idx, val_idx in kf.split(X):\n            X_train, X_val = X[train_idx], X[val_idx]\n            y_train = y[train_idx]\n            \n            if 'xgb' in model_dict['type']:\n                m = train_xgb(\n                    pd.DataFrame(X_train, columns=model_dict['feature_names']),\n                    y_train,\n                    model_dict['selected_features'],\n                    params=model_dict.get('params', None)\n                )\n                preds = predict_xgb(m, pd.DataFrame(X_val, columns=model_dict['feature_names']))\n            elif 'lgb' in model_dict['type']:\n                m = train_lgb(\n                    pd.DataFrame(X_train, columns=model_dict['feature_names']),\n                    y_train,\n                    model_dict['selected_features'],\n                    params=model_dict.get('params', None)\n                )\n                preds = predict_lgb(m, pd.DataFrame(X_val, columns=model_dict['feature_names']))\n            elif 'ert' in model_dict['type']:\n                m = train_ert(\n                    pd.DataFrame(X_train, columns=model_dict['feature_names']),\n                    y_train,\n                    model_dict['selected_features'],\n                    params=model_dict.get('params', None)\n                )\n                preds = predict_ert(m, pd.DataFrame(X_val, columns=model_dict['feature_names']))\n            \n            meta[val_idx, i] = preds\n            \n    return meta\n\ndef train_stacking(X, y, base_models, level2_model, n_folds=5):\n    meta_features = generate_meta_features(X.values, y.values, base_models, n_folds)\n    level2_model.fit(meta_features, y.values)\n    return level2_model, [model['feature_names'] for model in base_models]\n\ndef predict_stacking(stacking_model, base_models_info, X):\n    meta_test = []\n    for model_info in base_models_info:\n        if model_info['type'] == 'xgb':\n            preds = predict_xgb(model_info, X)\n        elif model_info['type'] == 'lgb':\n            preds = predict_lgb(model_info, X)\n        elif model_info['type'] == 'ert':\n            preds = predict_ert(model_info, X)\n        meta_test.append(preds)\n    return stacking_model.predict(np.column_stack(meta_test))\n\n#========== Pipeline chính ==========\n# Load data và chuẩn bị features\ndf = pd.read_csv(\"/kaggle/input/data-full-features-ai/weather_data_nghean (1).csv\")\ndf.fillna(df.mean(numeric_only=True), inplace=True)\n\nTARGET_COL = \"Radar\"\nHIMA_BANDS = ['B04B', 'B05B', 'B06B', 'B09B', 'B10B', 'B11B', 'B12B', 'B14B', 'B16B', 'I2B', 'I4B', 'IRB', 'VSB', 'WVB']\nERA5_PARAMS = ['CAPE', 'CIN', 'EWSS', 'IE', 'ISOR', 'KX', 'PEV', 'R250', 'R500', 'R850', 'SLHF', 'SLOR', 'SSHF', 'TCLW', 'TCW', 'TCWV', 'U250', 'U850', 'V250', 'V850']\nFOR_XG = HIMA_BANDS + ERA5_PARAMS\nALL_FEATURES = FOR_XG\n\nX = df[ALL_FEATURES]\ny = df[TARGET_COL]\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Huấn luyện các model level-1\ntrain_weight = np.where(y_train > 0, 5.0, 1.0)\nxgb_model = train_xgb(\n    X_train, y_train,\n    selected_features=FOR_XG,\n    params={'n_estimators': 200, 'max_depth': 6},\n    sample_weight=train_weight\n)\n\nlgb_model = train_lgb(\n    X_train, y_train,\n    selected_features=ALL_FEATURES,\n    params={'n_estimators': 200, 'max_depth': 6}\n)\n\nert_model = train_ert(\n    X_train, y_train,\n    selected_features=ALL_FEATURES\n)\n\n# Đánh giá các model\ndef evaluate_model(predict_func, model_dict, X_test, y_test):\n    preds = predict_func(model_dict, X_test)\n    cc, _ = pearsonr(y_test, preds)  # Tính Pearson Correlation Coefficient\n    return {\n        'MAE': mean_absolute_error(y_test, preds),\n        'RMSE': np.sqrt(mean_squared_error(y_test, preds)),\n        'R2': r2_score(y_test, preds),\n        'CC': cc\n    }\n\nmetrics = {\n    'XGB': evaluate_model(predict_xgb, xgb_model, X_test, y_test),\n    'LGB': evaluate_model(predict_lgb, lgb_model, X_test, y_test),\n    'ERT': evaluate_model(predict_ert, ert_model, X_test, y_test)\n}\n\n# Huấn luyện stacking model\nbase_models_info = [\n    {'type': 'xgb', **xgb_model},\n    {'type': 'lgb', **lgb_model},\n    {'type': 'ert', **ert_model}\n]\n\nlevel2_model = ElasticNet(alpha=0.01, l1_ratio=0.7)\nstacking_model, feature_names_list = train_stacking(\n    X_train, y_train,\n    base_models=base_models_info,\n    level2_model=level2_model\n)\n\n# Dự đoán và đánh giá stacking\ntest_preds = predict_stacking(\n    stacking_model,\n    base_models_info,\n    X_test\n)\n\nstacking_metrics = {\n    'MAE': mean_absolute_error(y_test, test_preds),\n    'RMSE': np.sqrt(mean_squared_error(y_test, test_preds)),\n    'R2': r2_score(y_test, test_preds),\n    'CC': pearsonr(y_test, test_preds)[0]  # Tính CC cho stacking\n}\n\nprint(\"Level-1 Metrics:\", metrics)\nprint(\"\\nStacking Metrics:\", stacking_metrics)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:23:04.274679Z","iopub.execute_input":"2025-05-05T08:23:04.274895Z","iopub.status.idle":"2025-05-05T08:24:23.820884Z","shell.execute_reply.started":"2025-05-05T08:23:04.274880Z","shell.execute_reply":"2025-05-05T08:24:23.820163Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[LightGBM] [Info] This is the GPU trainer!!\n[LightGBM] [Info] Total Bins 8240\n[LightGBM] [Info] Number of data points in the train set: 248635, number of used features: 34\n[LightGBM] [Info] Using GPU Device: Tesla T4, Vendor: NVIDIA Corporation\n[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n[LightGBM] [Info] GPU programs have been built\n[LightGBM] [Info] Size of histogram bin entry: 8\n[LightGBM] [Info] 34 dense feature groups (8.54 MB) transferred to GPU in 0.011481 secs. 0 sparse feature groups\n[LightGBM] [Info] Start training from score 0.206359\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[LightGBM] [Info] This is the GPU trainer!!\n[LightGBM] [Info] Total Bins 8240\n[LightGBM] [Info] Number of data points in the train set: 198908, number of used features: 34\n[LightGBM] [Info] Using GPU Device: Tesla T4, Vendor: NVIDIA Corporation\n[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n[LightGBM] [Info] GPU programs have been built\n[LightGBM] [Info] Size of histogram bin entry: 8\n[LightGBM] [Info] 34 dense feature groups (6.83 MB) transferred to GPU in 0.009675 secs. 0 sparse feature groups\n[LightGBM] [Info] Start training from score 0.206243\n[LightGBM] [Info] This is the GPU trainer!!\n[LightGBM] [Info] Total Bins 8240\n[LightGBM] [Info] Number of data points in the train set: 198908, number of used features: 34\n[LightGBM] [Info] Using GPU Device: Tesla T4, Vendor: NVIDIA Corporation\n[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n[LightGBM] [Info] GPU programs have been built\n[LightGBM] [Info] Size of histogram bin entry: 8\n[LightGBM] [Info] 34 dense feature groups (6.83 MB) transferred to GPU in 0.009765 secs. 0 sparse feature groups\n[LightGBM] [Info] Start training from score 0.208835\n[LightGBM] [Info] This is the GPU trainer!!\n[LightGBM] [Info] Total Bins 8240\n[LightGBM] [Info] Number of data points in the train set: 198908, number of used features: 34\n[LightGBM] [Info] Using GPU Device: Tesla T4, Vendor: NVIDIA Corporation\n[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n[LightGBM] [Info] GPU programs have been built\n[LightGBM] [Info] Size of histogram bin entry: 8\n[LightGBM] [Info] 34 dense feature groups (6.83 MB) transferred to GPU in 0.009844 secs. 0 sparse feature groups\n[LightGBM] [Info] Start training from score 0.205769\n[LightGBM] [Info] This is the GPU trainer!!\n[LightGBM] [Info] Total Bins 8240\n[LightGBM] [Info] Number of data points in the train set: 198908, number of used features: 34\n[LightGBM] [Info] Using GPU Device: Tesla T4, Vendor: NVIDIA Corporation\n[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n[LightGBM] [Info] GPU programs have been built\n[LightGBM] [Info] Size of histogram bin entry: 8\n[LightGBM] [Info] 34 dense feature groups (6.83 MB) transferred to GPU in 0.041663 secs. 0 sparse feature groups\n[LightGBM] [Info] Start training from score 0.207625\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Info] This is the GPU trainer!!\n[LightGBM] [Info] Total Bins 8240\n[LightGBM] [Info] Number of data points in the train set: 198908, number of used features: 34\n[LightGBM] [Info] Using GPU Device: Tesla T4, Vendor: NVIDIA Corporation\n[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...\n[LightGBM] [Info] GPU programs have been built\n[LightGBM] [Info] Size of histogram bin entry: 8\n[LightGBM] [Info] 34 dense feature groups (6.83 MB) transferred to GPU in 0.009703 secs. 0 sparse feature groups\n[LightGBM] [Info] Start training from score 0.207136\nLevel-1 Metrics: {'XGB': {'MAE': 0.21402695674841885, 'RMSE': 0.7141638086180984, 'R2': 0.7082872148859447, 'CC': 0.8426253204432401}, 'LGB': {'MAE': 0.15957881700533064, 'RMSE': 0.7313028148087506, 'R2': 0.6941177486176433, 'CC': 0.8360067057979489}, 'ERT': {'MAE': 0.12133290409763739, 'RMSE': 0.6683501718692362, 'R2': 0.7445135239317435, 'CC': 0.8641023904263418}}\n\nStacking Metrics: {'MAE': 0.1303217325304096, 'RMSE': 0.6605038880903169, 'R2': 0.7504770220552149, 'CC': 0.8670437526537678}\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"!pip install rasterio\n!pip install geopandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:24:23.821582Z","iopub.execute_input":"2025-05-05T08:24:23.821811Z","iopub.status.idle":"2025-05-05T08:24:29.923025Z","shell.execute_reply.started":"2025-05-05T08:24:23.821794Z","shell.execute_reply":"2025-05-05T08:24:29.922277Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: rasterio in /usr/local/lib/python3.11/dist-packages (1.4.3)\nRequirement already satisfied: affine in /usr/local/lib/python3.11/dist-packages (from rasterio) (2.4.0)\nRequirement already satisfied: attrs in /usr/local/lib/python3.11/dist-packages (from rasterio) (25.3.0)\nRequirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from rasterio) (2025.1.31)\nRequirement already satisfied: click>=4.0 in /usr/local/lib/python3.11/dist-packages (from rasterio) (8.1.8)\nRequirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.11/dist-packages (from rasterio) (0.7.2)\nRequirement already satisfied: numpy>=1.24 in /usr/local/lib/python3.11/dist-packages (from rasterio) (1.26.4)\nRequirement already satisfied: click-plugins in /usr/local/lib/python3.11/dist-packages (from rasterio) (1.1.1)\nRequirement already satisfied: pyparsing in /usr/local/lib/python3.11/dist-packages (from rasterio) (3.2.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.24->rasterio) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.24->rasterio) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.24->rasterio) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.24->rasterio) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.24->rasterio) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.24->rasterio) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.24->rasterio) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.24->rasterio) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.24->rasterio) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.24->rasterio) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.24->rasterio) (2024.2.0)\nRequirement already satisfied: geopandas in /usr/local/lib/python3.11/dist-packages (0.14.4)\nRequirement already satisfied: fiona>=1.8.21 in /usr/local/lib/python3.11/dist-packages (from geopandas) (1.10.1)\nRequirement already satisfied: numpy>=1.22 in /usr/local/lib/python3.11/dist-packages (from geopandas) (1.26.4)\nRequirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from geopandas) (24.2)\nRequirement already satisfied: pandas>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from geopandas) (2.2.3)\nRequirement already satisfied: pyproj>=3.3.0 in /usr/local/lib/python3.11/dist-packages (from geopandas) (3.7.0)\nRequirement already satisfied: shapely>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from geopandas) (2.1.0)\nRequirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.11/dist-packages (from fiona>=1.8.21->geopandas) (25.3.0)\nRequirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from fiona>=1.8.21->geopandas) (2025.1.31)\nRequirement already satisfied: click~=8.0 in /usr/local/lib/python3.11/dist-packages (from fiona>=1.8.21->geopandas) (8.1.8)\nRequirement already satisfied: click-plugins>=1.0 in /usr/local/lib/python3.11/dist-packages (from fiona>=1.8.21->geopandas) (1.1.1)\nRequirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.11/dist-packages (from fiona>=1.8.21->geopandas) (0.7.2)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22->geopandas) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22->geopandas) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22->geopandas) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22->geopandas) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22->geopandas) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.22->geopandas) (2.4.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.4.0->geopandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.4.0->geopandas) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.4.0->geopandas) (2025.2)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.4.0->geopandas) (1.17.0)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.22->geopandas) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.22->geopandas) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.22->geopandas) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.22->geopandas) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.22->geopandas) (2024.2.0)\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"def collect_files(base_path, data_type, expected_subdirs=None):\n    files_dict = {}\n    for root, _, files in os.walk(base_path):\n        for file in files:\n            if file.endswith('.tif'):\n                file_path = os.path.join(root, file)\n                dt = parse_datetime_from_filename(file, data_type)\n                if dt is None:\n                    continue\n                if expected_subdirs:\n                    subdir = os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(file_path)))))\n                    if dt not in files_dict:\n                        files_dict[dt] = {}\n                    files_dict[dt][subdir] = file_path\n                else:\n                    files_dict[dt] = file_path\n    return files_dict","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:24:29.925692Z","iopub.execute_input":"2025-05-05T08:24:29.925904Z","iopub.status.idle":"2025-05-05T08:24:29.932265Z","shell.execute_reply.started":"2025-05-05T08:24:29.925884Z","shell.execute_reply":"2025-05-05T08:24:29.931509Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Hàm phân tích thời gian từ tên file\ndef parse_datetime_from_filename(filename, data_type):\n    try:\n        if data_type == \"Hima\":\n            parts = filename.split('_')\n            if len(parts) < 2:\n                return None\n            time_part = parts[1].split('_TB.tif')[0]\n            time_part = time_part.replace('.Z', '')\n            dt = datetime.strptime(time_part, '%Y%m%d%H%M')\n        elif data_type == \"ERA5\":\n            parts = filename.split('_')\n            if len(parts) < 2:\n                return None\n            time_part = parts[1].replace('.tif', '')\n            dt = datetime.strptime(time_part, '%Y%m%d%H%M%S')\n        elif data_type == \"Radar\":\n            time_part = filename.split('_')[1].replace('.tif', '')\n            dt = datetime.strptime(time_part, '%Y%m%d%H%M%S')\n        else:\n            return None\n        return dt.replace(minute=0, second=0, microsecond=0)\n    except Exception as e:\n        global error_count\n        if error_count < 5:\n            print(f\"Error parsing datetime from {filename} (type {data_type}): {e}\")\n            error_count += 1\n        return None\nerror_count = 0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:24:29.933106Z","iopub.execute_input":"2025-05-05T08:24:29.933569Z","iopub.status.idle":"2025-05-05T08:24:29.948059Z","shell.execute_reply.started":"2025-05-05T08:24:29.933552Z","shell.execute_reply":"2025-05-05T08:24:29.947529Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"import os\nimport rasterio\nimport geopandas as gpd\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# Các hằng số\nHEIGHT = 90\nWIDTH = 250\nBASE_PATH = \"/kaggle/input/btl-ai/DATA_SV\"\nPRECIP_PATH = os.path.join(BASE_PATH, \"Precipitation/Radar\")\nOUTPUT_PATH = \"/kaggle/working/maps\"\ny_pred=predict_stacking(\n    stacking_model,\n    base_models_info,\n    X_train\n)\n# Hàm thu thập radar file\nradar_files_dict = collect_files(PRECIP_PATH, \"Radar\")\n\nif not radar_files_dict:\n    print(\"⚠️ Không có file radar nào!\")\nelse:\n    radar_files_dict = {datetime.strptime(str(k), \"%Y-%m-%d %H:%M:%S\"): v for k, v in radar_files_dict.items()}\n    print(\"🔍 radar_files_dict keys:\", list(radar_files_dict.keys())[:5])\n\n    final_df = pd.read_csv(\"/kaggle/input/data-full-features-ai/weather_data_nghean (1).csv\")\n    final_df['datetime'] = pd.to_datetime(final_df['datetime'])\n\n    sample_dt = pd.to_datetime(\"2020-10-29 06:00:00\")\n    sample_df = final_df[final_df['datetime'] == sample_dt].copy()\n\n    if sample_df.empty:\n        print(f\"Không có dữ liệu cho thời điểm {sample_dt}\")\n    else:\n        test_indices = X_test.index\n        sample_df['prediction'] = np.nan\n        for idx in test_indices:\n            if idx in sample_df.index:\n                sample_df.loc[idx, 'prediction'] = y_pred[list(test_indices).index(idx)]\n\n        ground_truth_map = np.zeros((HEIGHT, WIDTH))\n        prediction_map = np.zeros((HEIGHT, WIDTH))\n\n        if sample_dt in radar_files_dict:\n            radar_file = radar_files_dict[sample_dt]\n        else:\n            if radar_files_dict:\n                closest_dt = min(radar_files_dict.keys(), key=lambda x: abs(x - sample_dt))\n                radar_file = radar_files_dict[closest_dt]\n                print(f\"Không tìm thấy {sample_dt}, dùng ngày gần nhất: {closest_dt}\")\n            else:\n                print(\"⚠️ Không tìm thấy file radar gần nhất.\")\n                radar_file = None\n\n        if radar_file:\n            with rasterio.open(radar_file) as src:\n                transform = src.transform\n                for _, row in sample_df.iterrows():\n                    try:\n                        row_idx, col_idx = rasterio.transform.rowcol(transform, row['x'], row['y'])\n                        if 0 <= row_idx < HEIGHT and 0 <= col_idx < WIDTH:\n                            ground_truth_map[row_idx, col_idx] = row['Radar']\n                            if not np.isnan(row['prediction']):\n                                prediction_map[row_idx, col_idx] = row['prediction']\n                    except Exception as e:\n                        print(f\"Bỏ qua điểm ({row['x']}, {row['y']}) do lỗi: {e}\")\n\n            x_min, x_max = sample_df['x'].min(), sample_df['x'].max()\n            y_min, y_max = sample_df['y'].min(), sample_df['y'].max()\n            if not np.isfinite([x_min, x_max, y_min, y_max]).all() or x_min == x_max or y_min == y_max:\n                print(f\"Extent không hợp lệ cho thời điểm {sample_dt}, bỏ qua.\")\n            else:\n                # >>> CHỈNH SỬA Ở ĐÂY: Dùng vmin, vmax chung\n                vmin = min(ground_truth_map.min(), prediction_map.min())\n                vmax = max(ground_truth_map.max(), prediction_map.max())\n                print(f\"Color range: {vmin} - {vmax}\")\n\n                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), subplot_kw={'projection': ccrs.PlateCarree()})\n\n                ax1.set_title(f'Ground Truth - {sample_dt}')\n                ax1.coastlines()\n                ax1.add_feature(cfeature.BORDERS)\n                im1 = ax1.imshow(ground_truth_map, cmap='Blues', origin='upper', transform=ccrs.PlateCarree(),\n                                 extent=(x_min, x_max, y_min, y_max), vmin=vmin, vmax=vmax)\n                plt.colorbar(im1, ax=ax1, label='Lượng mưa (mm/h)')\n\n                ax2.set_title(f'Prediction (Stacking) - {sample_dt}')\n                ax2.coastlines()\n                ax2.add_feature(cfeature.BORDERS)\n                im2 = ax2.imshow(prediction_map, cmap='Blues', origin='upper', transform=ccrs.PlateCarree(),\n                                 extent=(x_min, x_max, y_min, y_max), vmin=vmin, vmax=vmax)\n                plt.colorbar(im2, ax=ax2, label='Lượng mưa (mm/h)')\n\n                plt.tight_layout()\n                os.makedirs(OUTPUT_PATH, exist_ok=True)\n                plt.savefig(os.path.join(OUTPUT_PATH, f'rainfall_map_{sample_dt.strftime(\"%Y%m%d%H%M\")}.png'))\n                plt.close()\n                print(f\"✅ Đã lưu bản đồ cho thời điểm {sample_dt}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:25:39.219834Z","iopub.execute_input":"2025-05-05T08:25:39.220350Z","iopub.status.idle":"2025-05-05T08:25:45.945042Z","shell.execute_reply.started":"2025-05-05T08:25:39.220323Z","shell.execute_reply":"2025-05-05T08:25:45.944417Z"}},"outputs":[{"name":"stdout","text":"🔍 radar_files_dict keys: [datetime.datetime(2020, 10, 17, 7, 0), datetime.datetime(2020, 10, 17, 10, 0), datetime.datetime(2020, 10, 17, 4, 0), datetime.datetime(2020, 10, 17, 2, 0), datetime.datetime(2020, 10, 17, 13, 0)]\nColor range: -0.030273427096177287 - 82.57\n✅ Đã lưu bản đồ cho thời điểm 2020-10-29 06:00:00\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# # import shutil\n# shutil.rmtree(\"/kaggle/working/maps\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:25:45.946188Z","iopub.execute_input":"2025-05-05T08:25:45.946400Z","iopub.status.idle":"2025-05-05T08:25:45.949416Z","shell.execute_reply.started":"2025-05-05T08:25:45.946384Z","shell.execute_reply":"2025-05-05T08:25:45.948850Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\nOUTPUT_PATH = \"/kaggle/working\" \ndef plot_rainfall_comparison(y_true, y_pred):\n    \"\"\"\n    Vẽ biểu đồ so sánh lượng mưa dự đoán và thực tế\n    \n    Parameters:\n    y_true (array): Giá trị thực tế\n    y_pred (array): Giá trị dự đoán\n    \"\"\"\n    plt.figure(figsize=(8, 8))\n    \n    # Vẽ scatter plot\n    scatter = plt.scatter(y_true, y_pred, c=np.abs(y_true - y_pred), \n                         cmap='viridis', alpha=0.6, edgecolors='w', \n                         linewidth=0.5, vmin=0, vmax=40)\n    \n    # Vẽ đường y=x\n    max_val = max(np.max(y_true), np.max(y_pred))\n    plt.plot([0, max_val], [0, max_val], 'r--', linewidth=2, label='y=x')\n    \n    # Cấu hình plot\n    plt.colorbar(scatter, label='Sai số tuyệt đối (mm/h)')\n    plt.title('So sánh Ground Truth và Dự đoán Stacking', fontsize=14, pad=20)\n    plt.xlabel('Ground Truth (Lượng mưa mm/h)', fontsize=12)\n    plt.ylabel('Dự đoán (Lượng mưa mm/h)', fontsize=12)\n    plt.xticks(np.arange(0, 85, 20))\n    plt.yticks(np.arange(0, 85, 20))\n    plt.grid(alpha=0.3)\n    plt.axis('equal')\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n    os.makedirs(OUTPUT_PATH, exist_ok=True)\n    plt.savefig(os.path.join(OUTPUT_PATH, 'scatter_comparison.png'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:25:57.450882Z","iopub.execute_input":"2025-05-05T08:25:57.451172Z","iopub.status.idle":"2025-05-05T08:25:57.458248Z","shell.execute_reply.started":"2025-05-05T08:25:57.451151Z","shell.execute_reply":"2025-05-05T08:25:57.457502Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"y_test_pred = predict_stacking(stacking_model, base_models_info, X_test)\nplot_rainfall_comparison(y_test, y_test_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T08:25:58.061928Z","iopub.execute_input":"2025-05-05T08:25:58.062482Z","iopub.status.idle":"2025-05-05T08:26:00.914808Z","shell.execute_reply.started":"2025-05-05T08:25:58.062457Z","shell.execute_reply":"2025-05-05T08:26:00.914062Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x800 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 0 Axes>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}